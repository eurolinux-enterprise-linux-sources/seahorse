/* seahorse-common.h generated by valac 0.28.0, the Vala compiler, do not modify */


#ifndef __COMMON_SEAHORSE_COMMON_H__
#define __COMMON_SEAHORSE_COMMON_H__

#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gcr/gcr-base.h>
#include <gio/gio.h>

G_BEGIN_DECLS


#define SEAHORSE_TYPE_ACTION (seahorse_action_get_type ())
#define SEAHORSE_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_ACTION, SeahorseAction))
#define SEAHORSE_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SEAHORSE_TYPE_ACTION, SeahorseActionClass))
#define SEAHORSE_IS_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_ACTION))
#define SEAHORSE_IS_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SEAHORSE_TYPE_ACTION))
#define SEAHORSE_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SEAHORSE_TYPE_ACTION, SeahorseActionClass))

typedef struct _SeahorseAction SeahorseAction;
typedef struct _SeahorseActionClass SeahorseActionClass;
typedef struct _SeahorseActionPrivate SeahorseActionPrivate;

#define SEAHORSE_TYPE_CATALOG (seahorse_catalog_get_type ())
#define SEAHORSE_CATALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_CATALOG, SeahorseCatalog))
#define SEAHORSE_CATALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SEAHORSE_TYPE_CATALOG, SeahorseCatalogClass))
#define SEAHORSE_IS_CATALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_CATALOG))
#define SEAHORSE_IS_CATALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SEAHORSE_TYPE_CATALOG))
#define SEAHORSE_CATALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SEAHORSE_TYPE_CATALOG, SeahorseCatalogClass))

typedef struct _SeahorseCatalog SeahorseCatalog;
typedef struct _SeahorseCatalogClass SeahorseCatalogClass;

#define SEAHORSE_TYPE_ACTIONS (seahorse_actions_get_type ())
#define SEAHORSE_ACTIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_ACTIONS, SeahorseActions))
#define SEAHORSE_ACTIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SEAHORSE_TYPE_ACTIONS, SeahorseActionsClass))
#define SEAHORSE_IS_ACTIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_ACTIONS))
#define SEAHORSE_IS_ACTIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SEAHORSE_TYPE_ACTIONS))
#define SEAHORSE_ACTIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SEAHORSE_TYPE_ACTIONS, SeahorseActionsClass))

typedef struct _SeahorseActions SeahorseActions;
typedef struct _SeahorseActionsClass SeahorseActionsClass;
typedef struct _SeahorseActionsPrivate SeahorseActionsPrivate;

#define SEAHORSE_TYPE_BACKEND (seahorse_backend_get_type ())
#define SEAHORSE_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_BACKEND, SeahorseBackend))
#define SEAHORSE_IS_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_BACKEND))
#define SEAHORSE_BACKEND_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SEAHORSE_TYPE_BACKEND, SeahorseBackendIface))

typedef struct _SeahorseBackend SeahorseBackend;
typedef struct _SeahorseBackendIface SeahorseBackendIface;

#define SEAHORSE_TYPE_PLACE (seahorse_place_get_type ())
#define SEAHORSE_PLACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_PLACE, SeahorsePlace))
#define SEAHORSE_IS_PLACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_PLACE))
#define SEAHORSE_PLACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SEAHORSE_TYPE_PLACE, SeahorsePlaceIface))

typedef struct _SeahorsePlace SeahorsePlace;
typedef struct _SeahorsePlaceIface SeahorsePlaceIface;
typedef struct _SeahorseCatalogPrivate SeahorseCatalogPrivate;

#define SEAHORSE_TYPE_DELETABLE (seahorse_deletable_get_type ())
#define SEAHORSE_DELETABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_DELETABLE, SeahorseDeletable))
#define SEAHORSE_IS_DELETABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_DELETABLE))
#define SEAHORSE_DELETABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SEAHORSE_TYPE_DELETABLE, SeahorseDeletableIface))

typedef struct _SeahorseDeletable SeahorseDeletable;
typedef struct _SeahorseDeletableIface SeahorseDeletableIface;

#define SEAHORSE_TYPE_DELETER (seahorse_deleter_get_type ())
#define SEAHORSE_DELETER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_DELETER, SeahorseDeleter))
#define SEAHORSE_DELETER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SEAHORSE_TYPE_DELETER, SeahorseDeleterClass))
#define SEAHORSE_IS_DELETER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_DELETER))
#define SEAHORSE_IS_DELETER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SEAHORSE_TYPE_DELETER))
#define SEAHORSE_DELETER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SEAHORSE_TYPE_DELETER, SeahorseDeleterClass))

typedef struct _SeahorseDeleter SeahorseDeleter;
typedef struct _SeahorseDeleterClass SeahorseDeleterClass;

#define SEAHORSE_TYPE_DELETE_DIALOG (seahorse_delete_dialog_get_type ())
#define SEAHORSE_DELETE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_DELETE_DIALOG, SeahorseDeleteDialog))
#define SEAHORSE_DELETE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SEAHORSE_TYPE_DELETE_DIALOG, SeahorseDeleteDialogClass))
#define SEAHORSE_IS_DELETE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_DELETE_DIALOG))
#define SEAHORSE_IS_DELETE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SEAHORSE_TYPE_DELETE_DIALOG))
#define SEAHORSE_DELETE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SEAHORSE_TYPE_DELETE_DIALOG, SeahorseDeleteDialogClass))

typedef struct _SeahorseDeleteDialog SeahorseDeleteDialog;
typedef struct _SeahorseDeleteDialogClass SeahorseDeleteDialogClass;
typedef struct _SeahorseDeleteDialogPrivate SeahorseDeleteDialogPrivate;
typedef struct _SeahorseDeleterPrivate SeahorseDeleterPrivate;

#define SEAHORSE_TYPE_EXPORTABLE (seahorse_exportable_get_type ())
#define SEAHORSE_EXPORTABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_EXPORTABLE, SeahorseExportable))
#define SEAHORSE_IS_EXPORTABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_EXPORTABLE))
#define SEAHORSE_EXPORTABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SEAHORSE_TYPE_EXPORTABLE, SeahorseExportableIface))

typedef struct _SeahorseExportable SeahorseExportable;
typedef struct _SeahorseExportableIface SeahorseExportableIface;

#define SEAHORSE_TYPE_EXPORTER_TYPE (seahorse_exporter_type_get_type ())

#define SEAHORSE_TYPE_EXPORTER (seahorse_exporter_get_type ())
#define SEAHORSE_EXPORTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_EXPORTER, SeahorseExporter))
#define SEAHORSE_IS_EXPORTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_EXPORTER))
#define SEAHORSE_EXPORTER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SEAHORSE_TYPE_EXPORTER, SeahorseExporterIface))

typedef struct _SeahorseExporter SeahorseExporter;
typedef struct _SeahorseExporterIface SeahorseExporterIface;

#define SEAHORSE_TYPE_LOCKABLE (seahorse_lockable_get_type ())
#define SEAHORSE_LOCKABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_LOCKABLE, SeahorseLockable))
#define SEAHORSE_IS_LOCKABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_LOCKABLE))
#define SEAHORSE_LOCKABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SEAHORSE_TYPE_LOCKABLE, SeahorseLockableIface))

typedef struct _SeahorseLockable SeahorseLockable;
typedef struct _SeahorseLockableIface SeahorseLockableIface;

#define SEAHORSE_TYPE_REGISTRY (seahorse_registry_get_type ())
#define SEAHORSE_REGISTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_REGISTRY, SeahorseRegistry))
#define SEAHORSE_REGISTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SEAHORSE_TYPE_REGISTRY, SeahorseRegistryClass))
#define SEAHORSE_IS_REGISTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_REGISTRY))
#define SEAHORSE_IS_REGISTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SEAHORSE_TYPE_REGISTRY))
#define SEAHORSE_REGISTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SEAHORSE_TYPE_REGISTRY, SeahorseRegistryClass))

typedef struct _SeahorseRegistry SeahorseRegistry;
typedef struct _SeahorseRegistryClass SeahorseRegistryClass;
typedef struct _SeahorseRegistryPrivate SeahorseRegistryPrivate;

#define SEAHORSE_TYPE_USAGE (seahorse_usage_get_type ())

#define SEAHORSE_TYPE_FLAGS (seahorse_flags_get_type ())

#define SEAHORSE_TYPE_VIEWABLE (seahorse_viewable_get_type ())
#define SEAHORSE_VIEWABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SEAHORSE_TYPE_VIEWABLE, SeahorseViewable))
#define SEAHORSE_IS_VIEWABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SEAHORSE_TYPE_VIEWABLE))
#define SEAHORSE_VIEWABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SEAHORSE_TYPE_VIEWABLE, SeahorseViewableIface))

typedef struct _SeahorseViewable SeahorseViewable;
typedef struct _SeahorseViewableIface SeahorseViewableIface;

struct _SeahorseAction {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SeahorseActionPrivate * priv;
};

struct _SeahorseActionClass {
	GTypeClass parent_class;
	void (*finalize) (SeahorseAction *self);
};

struct _SeahorseActions {
	GtkActionGroup parent_instance;
	SeahorseActionsPrivate * priv;
};

struct _SeahorseActionsClass {
	GtkActionGroupClass parent_class;
};

struct _SeahorsePlaceIface {
	GTypeInterface parent_iface;
	void (*load) (SeahorsePlace* self, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*load_finish) (SeahorsePlace* self, GAsyncResult* _res_, GError** error);
	gchar* (*get_label) (SeahorsePlace* self);
	gchar* (*get_description) (SeahorsePlace* self);
	gchar* (*get_uri) (SeahorsePlace* self);
	GIcon* (*get_icon) (SeahorsePlace* self);
	GtkActionGroup* (*get_actions) (SeahorsePlace* self);
};

struct _SeahorseBackendIface {
	GTypeInterface parent_iface;
	SeahorsePlace* (*lookup_place) (SeahorseBackend* self, const gchar* uri);
	const gchar* (*get_name) (SeahorseBackend* self);
	const gchar* (*get_label) (SeahorseBackend* self);
	const gchar* (*get_description) (SeahorseBackend* self);
	GtkActionGroup* (*get_actions) (SeahorseBackend* self);
	gboolean (*get_loaded) (SeahorseBackend* self);
};

struct _SeahorseCatalog {
	GtkWindow parent_instance;
	SeahorseCatalogPrivate * priv;
};

struct _SeahorseCatalogClass {
	GtkWindowClass parent_class;
	GList* (*get_backends) (SeahorseCatalog* self);
	SeahorsePlace* (*get_focused_place) (SeahorseCatalog* self);
	GList* (*get_selected_objects) (SeahorseCatalog* self);
	void (*selection_changed) (SeahorseCatalog* self);
};

struct _SeahorseDeletableIface {
	GTypeInterface parent_iface;
	SeahorseDeleter* (*create_deleter) (SeahorseDeletable* self);
	gboolean (*get_deletable) (SeahorseDeletable* self);
};

struct _SeahorseDeleteDialog {
	GtkMessageDialog parent_instance;
	SeahorseDeleteDialogPrivate * priv;
};

struct _SeahorseDeleteDialogClass {
	GtkMessageDialogClass parent_class;
};

struct _SeahorseDeleter {
	GObject parent_instance;
	SeahorseDeleterPrivate * priv;
};

struct _SeahorseDeleterClass {
	GObjectClass parent_class;
	GtkDialog* (*create_confirm) (SeahorseDeleter* self, GtkWindow* parent);
	GList* (*get_objects) (SeahorseDeleter* self);
	gboolean (*add_object) (SeahorseDeleter* self, GObject* obj);
	void (*delete) (SeahorseDeleter* self, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*delete_finish) (SeahorseDeleter* self, GAsyncResult* _res_, GError** error);
};

typedef enum  {
	SEAHORSE_EXPORTER_TYPE_ANY,
	SEAHORSE_EXPORTER_TYPE_TEXTUAL
} SeahorseExporterType;

struct _SeahorseExporterIface {
	GTypeInterface parent_iface;
	GList* (*get_objects) (SeahorseExporter* self);
	gboolean (*add_object) (SeahorseExporter* self, GObject* obj);
	void (*export) (SeahorseExporter* self, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	guint8* (*export_finish) (SeahorseExporter* self, GAsyncResult* _res_, size_t* result_length1, GError** error);
	gchar* (*get_filename) (SeahorseExporter* self);
	const gchar* (*get_content_type) (SeahorseExporter* self);
	GtkFileFilter* (*get_file_filter) (SeahorseExporter* self);
};

struct _SeahorseExportableIface {
	GTypeInterface parent_iface;
	GList* (*create_exporters) (SeahorseExportable* self, SeahorseExporterType type);
	gboolean (*get_exportable) (SeahorseExportable* self);
};

struct _SeahorseLockableIface {
	GTypeInterface parent_iface;
	void (*lock) (SeahorseLockable* self, GTlsInteraction* interaction, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*lock_finish) (SeahorseLockable* self, GAsyncResult* _res_, GError** error);
	void (*unlock) (SeahorseLockable* self, GTlsInteraction* interaction, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*unlock_finish) (SeahorseLockable* self, GAsyncResult* _res_, GError** error);
	gboolean (*get_lockable) (SeahorseLockable* self);
	gboolean (*get_unlockable) (SeahorseLockable* self);
};

struct _SeahorseRegistry {
	GObject parent_instance;
	SeahorseRegistryPrivate * priv;
};

struct _SeahorseRegistryClass {
	GObjectClass parent_class;
};

typedef enum  {
	SEAHORSE_USAGE_NONE = 0,
	SEAHORSE_USAGE_SYMMETRIC_KEY = 1,
	SEAHORSE_USAGE_PUBLIC_KEY = 2,
	SEAHORSE_USAGE_PRIVATE_KEY = 3,
	SEAHORSE_USAGE_CREDENTIALS = 4,
	SEAHORSE_USAGE_IDENTITY = 5,
	SEAHORSE_USAGE_OTHER = 10
} SeahorseUsage;

typedef enum  {
	SEAHORSE_FLAG_NONE = 0,
	SEAHORSE_FLAG_IS_VALID = 0x00000001,
	SEAHORSE_FLAG_CAN_ENCRYPT = 0x00000002,
	SEAHORSE_FLAG_CAN_SIGN = 0x00000004,
	SEAHORSE_FLAG_CAN_CERTIFY = 0x00000008,
	SEAHORSE_FLAG_CAN_AUTHENTICATE = 0x00000010,
	SEAHORSE_FLAG_EXPIRED = 0x00000100,
	SEAHORSE_FLAG_REVOKED = 0x00000200,
	SEAHORSE_FLAG_DISABLED = 0x00000400,
	SEAHORSE_FLAG_TRUSTED = 0x00001000,
	SEAHORSE_FLAG_PERSONAL = 0x00002000,
	SEAHORSE_FLAG_EXPORTABLE = 0x00100000,
	SEAHORSE_FLAG_DELETABLE = 0x10000000
} SeahorseFlags;

struct _SeahorseViewableIface {
	GTypeInterface parent_iface;
	GtkWindow* (*create_viewer) (SeahorseViewable* self, GtkWindow* parent);
};


gpointer seahorse_action_ref (gpointer instance);
void seahorse_action_unref (gpointer instance);
GParamSpec* seahorse_param_spec_action (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void seahorse_value_set_action (GValue* value, gpointer v_object);
void seahorse_value_take_action (GValue* value, gpointer v_object);
gpointer seahorse_value_get_action (const GValue* value);
GType seahorse_action_get_type (void) G_GNUC_CONST;
GType seahorse_catalog_get_type (void) G_GNUC_CONST;
void seahorse_action_pre_activate (GtkAction* action, SeahorseCatalog* catalog, GtkWindow* window);
void seahorse_action_activate_with_window (GtkAction* action, SeahorseCatalog* catalog, GtkWindow* window);
void seahorse_action_post_activate (GtkAction* action);
GtkWindow* seahorse_action_get_window (GtkAction* action);
SeahorseCatalog* seahorse_action_get_catalog (GtkAction* action);
SeahorseAction* seahorse_action_new (void);
SeahorseAction* seahorse_action_construct (GType object_type);
GType seahorse_actions_get_type (void) G_GNUC_CONST;
void seahorse_actions_register_definition (SeahorseActions* self, const gchar* definition);
SeahorseCatalog* seahorse_actions_get_catalog (SeahorseActions* self);
void seahorse_actions_set_catalog (SeahorseActions* self, SeahorseCatalog* value);
const gchar* seahorse_actions_get_definition (SeahorseActions* self);
GType seahorse_place_get_type (void) G_GNUC_CONST;
GType seahorse_backend_get_type (void) G_GNUC_CONST;
SeahorsePlace* seahorse_backend_lookup_place (SeahorseBackend* self, const gchar* uri);
void seahorse_backend_register (SeahorseBackend* self);
GList* seahorse_backend_get_registered (void);
const gchar* seahorse_backend_get_name (SeahorseBackend* self);
const gchar* seahorse_backend_get_label (SeahorseBackend* self);
const gchar* seahorse_backend_get_description (SeahorseBackend* self);
GtkActionGroup* seahorse_backend_get_actions (SeahorseBackend* self);
gboolean seahorse_backend_get_loaded (SeahorseBackend* self);
#define SEAHORSE_CATALOG_MENU_OBJECT "ObjectPopup"
GList* seahorse_catalog_get_backends (SeahorseCatalog* self);
SeahorsePlace* seahorse_catalog_get_focused_place (SeahorseCatalog* self);
GList* seahorse_catalog_get_selected_objects (SeahorseCatalog* self);
GtkBuilder* seahorse_catalog_get_builder (SeahorseCatalog* self);
gconstpointer seahorse_catalog_get_widget (SeahorseCatalog* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* name);
void seahorse_catalog_ensure_updated (SeahorseCatalog* self);
void seahorse_catalog_include_actions (SeahorseCatalog* self, GtkActionGroup* group);
void seahorse_catalog_show_properties (SeahorseCatalog* self, GObject* obj);
void seahorse_catalog_show_context_menu (SeahorseCatalog* self, const gchar* name, guint button, guint time);
SeahorseCatalog* seahorse_catalog_construct (GType object_type);
GtkWindow* seahorse_catalog_get_window (SeahorseCatalog* self);
const gchar* seahorse_catalog_get_ui_name (SeahorseCatalog* self);
GType seahorse_deleter_get_type (void) G_GNUC_CONST;
GType seahorse_deletable_get_type (void) G_GNUC_CONST;
SeahorseDeleter* seahorse_deletable_create_deleter (SeahorseDeletable* self);
gboolean seahorse_deletable_can_delete (GObject* obj);
gint seahorse_deletable_delete_with_prompt_wait (GList* objects, GtkWindow* parent, GError** error);
gboolean seahorse_deletable_get_deletable (SeahorseDeletable* self);
GType seahorse_delete_dialog_get_type (void) G_GNUC_CONST;
GtkDialog* seahorse_delete_dialog_new (GtkWindow* parent, const gchar* format, ...);
GtkDialog* seahorse_delete_dialog_construct (GType object_type, GtkWindow* parent, const gchar* format, ...);
GtkDialog* seahorse_delete_dialog_constructv (GType object_type, GtkWindow* parent, const gchar* format, va_list _vala_va_list);
gboolean seahorse_delete_dialog_prompt (GtkWindow* parent, const gchar* text);
const gchar* seahorse_delete_dialog_get_check_label (SeahorseDeleteDialog* self);
void seahorse_delete_dialog_set_check_label (SeahorseDeleteDialog* self, const gchar* value);
gboolean seahorse_delete_dialog_get_check_value (SeahorseDeleteDialog* self);
void seahorse_delete_dialog_set_check_value (SeahorseDeleteDialog* self, gboolean value);
gboolean seahorse_delete_dialog_get_check_require (SeahorseDeleteDialog* self);
void seahorse_delete_dialog_set_check_require (SeahorseDeleteDialog* self, gboolean value);
GtkDialog* seahorse_deleter_create_confirm (SeahorseDeleter* self, GtkWindow* parent);
GList* seahorse_deleter_get_objects (SeahorseDeleter* self);
gboolean seahorse_deleter_add_object (SeahorseDeleter* self, GObject* obj);
void seahorse_deleter_delete (SeahorseDeleter* self, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean seahorse_deleter_delete_finish (SeahorseDeleter* self, GAsyncResult* _res_, GError** error);
gboolean seahorse_deleter_prompt (SeahorseDeleter* self, GtkWindow* parent);
SeahorseDeleter* seahorse_deleter_construct (GType object_type);
GType seahorse_exporter_type_get_type (void) G_GNUC_CONST;
GType seahorse_exporter_get_type (void) G_GNUC_CONST;
GType seahorse_exportable_get_type (void) G_GNUC_CONST;
GList* seahorse_exportable_create_exporters (SeahorseExportable* self, SeahorseExporterType type);
gboolean seahorse_exportable_can_export (GObject* object);
gint seahorse_exportable_export_to_directory_wait (GList* objects, const gchar* directory, GError** error);
guint seahorse_exportable_export_to_text_wait (GList* objects, guint8** output, size_t* output_length1, GError** error);
gint seahorse_exportable_export_to_prompt_wait (GList* objects, GtkWindow* parent, GError** error);
gboolean seahorse_exportable_prompt (GList* exporters, GtkWindow* parent, gchar** directory, GFile** chosen_file, SeahorseExporter** chosen_exporter);
gboolean seahorse_exportable_get_exportable (SeahorseExportable* self);
#define SEAHORSE_BAD_FILENAME_CHARS "/\\<>|:?;"
GList* seahorse_exporter_get_objects (SeahorseExporter* self);
gboolean seahorse_exporter_add_object (SeahorseExporter* self, GObject* obj);
void seahorse_exporter_export (SeahorseExporter* self, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
guint8* seahorse_exporter_export_finish (SeahorseExporter* self, GAsyncResult* _res_, size_t* result_length1, GError** error);
void seahorse_exporter_export_to_file (SeahorseExporter* self, GFile* file, gboolean overwrite, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean seahorse_exporter_export_to_file_finish (SeahorseExporter* self, GAsyncResult* _res_, GError** error);
gchar* seahorse_exporter_get_filename (SeahorseExporter* self);
const gchar* seahorse_exporter_get_content_type (SeahorseExporter* self);
GtkFileFilter* seahorse_exporter_get_file_filter (SeahorseExporter* self);
#define SEAHORSE_ICON_KEY "seahorse-key"
#define SEAHORSE_ICON_SECRET "seahorse-key-personal"
#define SEAHORSE_ICON_KEY_SSH "seahorse-key-ssh"
#define SEAHORSE_ICON_PERSON "seahorse-person"
#define SEAHORSE_ICON_SIGN "seahorse-sign"
#define SEAHORSE_ICON_SIGN_OK "seahorse-sign-ok"
#define SEAHORSE_ICON_SIGN_BAD "seahorse-sign-bad"
#define SEAHORSE_ICON_SIGN_UNKNOWN "seahorse-sign-unknown"
#define SEAHORSE_ICON_WEBBROWSER "web-browser"
#define SEAHORSE_ICON_FOLDER "folder"
#define SEAHORSE_ICON_PASSWORD "gcr-password"
extern gboolean seahorse__icons_inited;
void seahorse_icons_init (void);
GType seahorse_lockable_get_type (void) G_GNUC_CONST;
void seahorse_lockable_lock (SeahorseLockable* self, GTlsInteraction* interaction, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean seahorse_lockable_lock_finish (SeahorseLockable* self, GAsyncResult* _res_, GError** error);
void seahorse_lockable_unlock (SeahorseLockable* self, GTlsInteraction* interaction, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean seahorse_lockable_unlock_finish (SeahorseLockable* self, GAsyncResult* _res_, GError** error);
gboolean seahorse_lockable_can_lock (GObject* object);
gboolean seahorse_lockable_can_unlock (GObject* object);
gboolean seahorse_lockable_get_lockable (SeahorseLockable* self);
gboolean seahorse_lockable_get_unlockable (SeahorseLockable* self);
void seahorse_place_load (SeahorsePlace* self, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean seahorse_place_load_finish (SeahorsePlace* self, GAsyncResult* _res_, GError** error);
gchar* seahorse_place_get_label (SeahorsePlace* self);
gchar* seahorse_place_get_description (SeahorsePlace* self);
gchar* seahorse_place_get_uri (SeahorsePlace* self);
GIcon* seahorse_place_get_icon (SeahorsePlace* self);
GtkActionGroup* seahorse_place_get_actions (SeahorsePlace* self);
GType seahorse_registry_get_type (void) G_GNUC_CONST;
void seahorse_registry_cleanup (void);
void seahorse_registry_register_object (GObject* object, const gchar* category);
GObject* seahorse_registry_object_instance (const gchar* category);
GList* seahorse_registry_object_instances (const gchar* category);
SeahorseRegistry* seahorse_registry_new (void);
SeahorseRegistry* seahorse_registry_construct (GType object_type);
GType seahorse_usage_get_type (void) G_GNUC_CONST;
GType seahorse_flags_get_type (void) G_GNUC_CONST;
void seahorse_util_show_error (GtkWidget* parent, const gchar* heading, const gchar* message);
gchar* seahorse_util_get_display_date_string (glong time);
GtkBuilder* seahorse_util_load_built_contents (GtkContainer* frame, const gchar* name);
GType seahorse_viewable_get_type (void) G_GNUC_CONST;
GtkWindow* seahorse_viewable_create_viewer (SeahorseViewable* self, GtkWindow* parent);
gboolean seahorse_viewable_can_view (GObject* object);
gboolean seahorse_viewable_view (GObject* object, GtkWindow* parent);


G_END_DECLS

#endif
