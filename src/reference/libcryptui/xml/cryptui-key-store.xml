<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml"> 
]>
<refentry id="libcryptui-CryptUIKeyStore">
<refmeta>
<refentrytitle role="top_of_page" id="libcryptui-CryptUIKeyStore.top_of_page">CryptUIKeyStore</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBCRYPTUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>CryptUIKeyStore</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="libcryptui-CryptUIKeyStore.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="CryptUIKeyStorePriv">CryptUIKeyStorePriv</link>;
                    <link linkend="CryptUIKeyStore">CryptUIKeyStore</link>;
enum                <link linkend="CryptUIKeyStoreMode">CryptUIKeyStoreMode</link>;
<link linkend="gboolean">gboolean</link>            (<link linkend="CryptUIKeyStoreFilterFunc">*CryptUIKeyStoreFilterFunc</link>)        (<link linkend="CryptUIKeyset">CryptUIKeyset</link> *ckset,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="CryptUIKeyStore">CryptUIKeyStore</link>*    <link linkend="cryptui-key-store-new">cryptui_key_store_new</link>               (<link linkend="CryptUIKeyset">CryptUIKeyset</link> *keyset,
                                                         <link linkend="gboolean">gboolean</link> use_checks,
                                                         const <link linkend="gchar">gchar</link> *none_option);
<link linkend="CryptUIKeyset">CryptUIKeyset</link>*      <link linkend="cryptui-key-store-get-keyset">cryptui_key_store_get_keyset</link>        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-sortable">cryptui_key_store_set_sortable</link>      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="gboolean">gboolean</link> sortable);
<link linkend="gboolean">gboolean</link>            <link linkend="cryptui-key-store-get-sortable">cryptui_key_store_get_sortable</link>      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-check-toggled">cryptui_key_store_check_toggled</link>     (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="cryptui-key-store-get-iter-from-key">cryptui_key_store_get_iter_from_key</link> (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);
const <link linkend="gchar">gchar</link>*        <link linkend="cryptui-key-store-get-key-from-iter">cryptui_key_store_get_key_from_iter</link> (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);
const <link linkend="gchar">gchar</link>*        <link linkend="cryptui-key-store-get-key-from-path">cryptui_key_store_get_key_from_path</link> (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreePath">GtkTreePath</link> *path);
<link linkend="GList">GList</link>*              <link linkend="cryptui-key-store-get-all-keys">cryptui_key_store_get_all_keys</link>      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);
<link linkend="guint">guint</link>               <link linkend="cryptui-key-store-get-count">cryptui_key_store_get_count</link>         (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);
<link linkend="gboolean">gboolean</link>            <link linkend="cryptui-key-store-have-selected-keys">cryptui_key_store_have_selected_keys</link>
                                                        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);
<link linkend="GList">GList</link>*              <link linkend="cryptui-key-store-get-selected-keys">cryptui_key_store_get_selected_keys</link> (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-selected-keys">cryptui_key_store_set_selected_keys</link> (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         <link linkend="GList">GList</link> *keys);
const <link linkend="gchar">gchar</link>*        <link linkend="cryptui-key-store-get-selected-key">cryptui_key_store_get_selected_key</link>  (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-selected-key">cryptui_key_store_set_selected_key</link>  (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         const <link linkend="gchar">gchar</link> *selkey);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-search-mode">cryptui_key_store_set_search_mode</link>   (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="CryptUIKeyStoreMode">CryptUIKeyStoreMode</link> mode);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-search-text">cryptui_key_store_set_search_text</link>   (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         const <link linkend="gchar">gchar</link> *search_text);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-filter">cryptui_key_store_set_filter</link>        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="CryptUIKeyStoreFilterFunc">CryptUIKeyStoreFilterFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libcryptui-CryptUIKeyStore.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="libcryptui-CryptUIKeyStore.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="CryptUIKeyStorePriv" role="struct">
<title>CryptUIKeyStorePriv</title>
<indexterm zone="CryptUIKeyStorePriv"><primary sortas="KeyStorePriv">CryptUIKeyStorePriv</primary></indexterm><programlisting>typedef struct _CryptUIKeyStorePriv CryptUIKeyStorePriv;</programlisting>
<para>
</para></refsect2>
<refsect2 id="CryptUIKeyStore" role="struct">
<title>CryptUIKeyStore</title>
<indexterm zone="CryptUIKeyStore"><primary sortas="KeyStore">CryptUIKeyStore</primary></indexterm><programlisting>typedef struct {
    GtkTreeModelSort       parent;
 
    CryptUIKeyset          *ckset;
} CryptUIKeyStore;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="CryptUIKeyStoreMode" role="enum">
<title>enum CryptUIKeyStoreMode</title>
<indexterm zone="CryptUIKeyStoreMode"><primary sortas="KeyStoreMode">CryptUIKeyStoreMode</primary></indexterm><programlisting>typedef enum _CryptUIKeyStoreMode {
    CRYPTUI_KEY_STORE_MODE_ALL,
    CRYPTUI_KEY_STORE_MODE_SELECTED,
    CRYPTUI_KEY_STORE_MODE_RESULTS
} CryptUIKeyStoreMode;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="CryptUIKeyStoreFilterFunc" role="function">
<title>CryptUIKeyStoreFilterFunc ()</title>
<indexterm zone="CryptUIKeyStoreFilterFunc"><primary sortas="KeyStoreFilterFunc">CryptUIKeyStoreFilterFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*CryptUIKeyStoreFilterFunc)        (<link linkend="CryptUIKeyset">CryptUIKeyset</link> *ckset,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckset</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-new" role="function">
<title>cryptui_key_store_new ()</title>
<indexterm zone="cryptui-key-store-new"><primary sortas="key_store_new">cryptui_key_store_new</primary></indexterm><programlisting><link linkend="CryptUIKeyStore">CryptUIKeyStore</link>*    cryptui_key_store_new               (<link linkend="CryptUIKeyset">CryptUIKeyset</link> *keyset,
                                                         <link linkend="gboolean">gboolean</link> use_checks,
                                                         const <link linkend="gchar">gchar</link> *none_option);</programlisting>
<para>
Creates a new libcryptui key store setting the keystore, use-checks and none-option
properties</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>keyset</parameter>&#160;:</term>
<listitem><simpara> a libcryptui keyset
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>use_checks</parameter>&#160;:</term>
<listitem><simpara> a gboolean
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>none_option</parameter>&#160;:</term>
<listitem><simpara> a const gchar string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new libcryptui key store
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-keyset" role="function">
<title>cryptui_key_store_get_keyset ()</title>
<indexterm zone="cryptui-key-store-get-keyset"><primary sortas="key_store_get_keyset">cryptui_key_store_get_keyset</primary></indexterm><programlisting><link linkend="CryptUIKeyset">CryptUIKeyset</link>*      cryptui_key_store_get_keyset        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);</programlisting>
<para>
Gets ckstore's internal keyset</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the internal libcryptui keyset
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-sortable" role="function">
<title>cryptui_key_store_set_sortable ()</title>
<indexterm zone="cryptui-key-store-set-sortable"><primary sortas="key_store_set_sortable">cryptui_key_store_set_sortable</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_sortable      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="gboolean">gboolean</link> sortable);</programlisting>
<para>
Sets whether ckstore is sortable or not</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sortable</parameter>&#160;:</term>
<listitem><simpara> a gboolean
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-sortable" role="function">
<title>cryptui_key_store_get_sortable ()</title>
<indexterm zone="cryptui-key-store-get-sortable"><primary sortas="key_store_get_sortable">cryptui_key_store_get_sortable</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            cryptui_key_store_get_sortable      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);</programlisting>
<para>
Gets whether ckstore is sortable or not</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if ckstore is sortable, FALSE otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-check-toggled" role="function">
<title>cryptui_key_store_check_toggled ()</title>
<indexterm zone="cryptui-key-store-check-toggled"><primary sortas="key_store_check_toggled">cryptui_key_store_check_toggled</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_check_toggled     (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);</programlisting>
<para>
Gets whether the check at iter is toggled</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&#160;:</term>
<listitem><simpara> a GtkTreeView
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara> a GtkTreeIter
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-iter-from-key" role="function">
<title>cryptui_key_store_get_iter_from_key ()</title>
<indexterm zone="cryptui-key-store-get-iter-from-key"><primary sortas="key_store_get_iter_from_key">cryptui_key_store_get_iter_from_key</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            cryptui_key_store_get_iter_from_key (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);</programlisting>
<para>
Get the iter that the key is stored at in ckstore</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara> a GtkTreeIter
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the key is present in the ckstore and the value of iter
         has been modified to point to it, FALSE otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-key-from-iter" role="function">
<title>cryptui_key_store_get_key_from_iter ()</title>
<indexterm zone="cryptui-key-store-get-key-from-iter"><primary sortas="key_store_get_key_from_iter">cryptui_key_store_get_key_from_iter</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        cryptui_key_store_get_key_from_iter (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);</programlisting>
<para>
Gets the key stored at iter in ckstore</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara> a GtkTreeIter
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a libcryptui key
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-key-from-path" role="function">
<title>cryptui_key_store_get_key_from_path ()</title>
<indexterm zone="cryptui-key-store-get-key-from-path"><primary sortas="key_store_get_key_from_path">cryptui_key_store_get_key_from_path</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        cryptui_key_store_get_key_from_path (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreePath">GtkTreePath</link> *path);</programlisting>
<para>
Get the key at path in ckstore</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> a GtkTreePath
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a libcryptui key
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-all-keys" role="function">
<title>cryptui_key_store_get_all_keys ()</title>
<indexterm zone="cryptui-key-store-get-all-keys"><primary sortas="key_store_get_all_keys">cryptui_key_store_get_all_keys</primary></indexterm><programlisting><link linkend="GList">GList</link>*              cryptui_key_store_get_all_keys      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);</programlisting>
<para>
Get a list of all keys in ckstore</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of libcryptui keys
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-count" role="function">
<title>cryptui_key_store_get_count ()</title>
<indexterm zone="cryptui-key-store-get-count"><primary sortas="key_store_get_count">cryptui_key_store_get_count</primary></indexterm><programlisting><link linkend="guint">guint</link>               cryptui_key_store_get_count         (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);</programlisting>
<para>
Get the number of keys stored in ckstore</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of keys
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-have-selected-keys" role="function">
<title>cryptui_key_store_have_selected_keys ()</title>
<indexterm zone="cryptui-key-store-have-selected-keys"><primary sortas="key_store_have_selected_keys">cryptui_key_store_have_selected_keys</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            cryptui_key_store_have_selected_keys
                                                        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);</programlisting>
<para>
Determines whether keys are selected or not.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&#160;:</term>
<listitem><simpara> a GtkTreeView
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if keys have been selected, FALSE otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-selected-keys" role="function">
<title>cryptui_key_store_get_selected_keys ()</title>
<indexterm zone="cryptui-key-store-get-selected-keys"><primary sortas="key_store_get_selected_keys">cryptui_key_store_get_selected_keys</primary></indexterm><programlisting><link linkend="GList">GList</link>*              cryptui_key_store_get_selected_keys (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);</programlisting>
<para>
Get the currently selected keys</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&#160;:</term>
<listitem><simpara> a GtkTreeView
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of libcryptui keys
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-selected-keys" role="function">
<title>cryptui_key_store_set_selected_keys ()</title>
<indexterm zone="cryptui-key-store-set-selected-keys"><primary sortas="key_store_set_selected_keys">cryptui_key_store_set_selected_keys</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_selected_keys (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         <link linkend="GList">GList</link> *keys);</programlisting>
<para>
Set the current selection to be the list of keys</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&#160;:</term>
<listitem><simpara> a GtkTreeView
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keys</parameter>&#160;:</term>
<listitem><simpara> a list of libcryptui keys
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-selected-key" role="function">
<title>cryptui_key_store_get_selected_key ()</title>
<indexterm zone="cryptui-key-store-get-selected-key"><primary sortas="key_store_get_selected_key">cryptui_key_store_get_selected_key</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        cryptui_key_store_get_selected_key  (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);</programlisting>
<para>
Get the currently selected key</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&#160;:</term>
<listitem><simpara> a GtkTreeView
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a libcryptui key
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-selected-key" role="function">
<title>cryptui_key_store_set_selected_key ()</title>
<indexterm zone="cryptui-key-store-set-selected-key"><primary sortas="key_store_set_selected_key">cryptui_key_store_set_selected_key</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_selected_key  (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         const <link linkend="gchar">gchar</link> *selkey);</programlisting>
<para>
Marks the given key as selected</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&#160;:</term>
<listitem><simpara> a GtkTreeView
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selkey</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-search-mode" role="function">
<title>cryptui_key_store_set_search_mode ()</title>
<indexterm zone="cryptui-key-store-set-search-mode"><primary sortas="key_store_set_search_mode">cryptui_key_store_set_search_mode</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_search_mode   (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="CryptUIKeyStoreMode">CryptUIKeyStoreMode</link> mode);</programlisting>
<para>
Sets whether the keys returned will be all, just those searched for, or
those selected.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara> search mode
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-search-text" role="function">
<title>cryptui_key_store_set_search_text ()</title>
<indexterm zone="cryptui-key-store-set-search-text"><primary sortas="key_store_set_search_text">cryptui_key_store_set_search_text</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_search_text   (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         const <link linkend="gchar">gchar</link> *search_text);</programlisting>
<para>
Filters the keys in the store by the text in search_text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>search_text</parameter>&#160;:</term>
<listitem><simpara> a string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-filter" role="function">
<title>cryptui_key_store_set_filter ()</title>
<indexterm zone="cryptui-key-store-set-filter"><primary sortas="key_store_set_filter">cryptui_key_store_set_filter</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_filter        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="CryptUIKeyStoreFilterFunc">CryptUIKeyStoreFilterFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Filters the key store's keys with the given filter function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&#160;:</term>
<listitem><simpara> a libcryptui key store
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> a filter function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> a generic pointer
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
